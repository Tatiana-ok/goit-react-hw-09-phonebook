{"version":3,"sources":["views/css/RegistrationView.module.css","views/RegistrationView.js"],"names":["module","exports","connect","state","errorReg","authSelectors","getAuthError","dispatch","onRegister","data","authOperations","register","useState","name","setName","email","setEmail","password","setPassword","onHandleChange","e","target","value","console","warn","className","styles","form","onSubmit","preventDefault","toast","error","length","autoComplete","htmlFor","id","input","type","onChange","textPass","button","variant"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,+BAA+B,KAAO,+BAA+B,MAAQ,gCAAgC,OAAS,iCAAiC,SAAW,qC,mIC8F5KC,uBATS,SAAAC,GAAK,MAAK,CAE9BC,SAAUC,IAAcC,aAAaH,OAGd,SAAAI,GAAQ,MAAK,CACpCC,WAAY,SAACC,GAAD,OAAUF,EAASG,IAAeC,SAASF,QAG5CP,EAtFU,SAAC,GAAkB,IAAjBM,EAAgB,EAAhBA,WACvB,EAAwBI,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAiB,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACJ,IAAK,OACDC,EAAQQ,GACR,MACJ,IAAK,QACDN,EAASM,GACT,MACJ,IAAK,WACDJ,EAAYI,GACZ,MACJ,QACIC,QAAQC,KAAR,6DAAgCX,EAAhC,yGAoBZ,OACI,mCACI,uBAAMY,UAAWC,IAAOC,KAAMC,SAlBjB,SAAAR,GACjBA,EAAES,iBACW,KAAThB,GACAiB,IAAMC,MAAM,qHACA,KAAVhB,GACFe,IAAMC,MAAM,gKACVd,EAASe,OAAS,EACpBF,IAAMC,MAAM,kHAEZvB,EAAW,CAAEK,OAAME,QAAOE,aAC1BH,EAAQ,IACRE,EAAS,IACTE,EAAY,MAM0Ce,aAAa,MAAnE,UACI,kNACA,uBAAOC,QAAQ,OAAf,gCACA,uBACIrB,KAAK,OACLsB,GAAG,OACHV,UAAWC,IAAOU,MAClBC,KAAK,OACLC,SAAUnB,EACVG,MAAOT,IAEX,uBAAOqB,QAAQ,QAAf,2EACA,uBACIrB,KAAK,QACLsB,GAAG,QACHV,UAAWC,IAAOU,MAClBC,KAAK,OACLC,SAAUnB,EACVG,MAAOP,IAEX,uBAAOmB,QAAQ,WAAf,mDACA,uBACIrB,KAAK,WACLsB,GAAG,WACHV,UAAWC,IAAOU,MAClBC,KAAK,OACLC,SAAUnB,EACVG,MAAOL,IAEX,mBAAGQ,UAAWC,IAAOa,SAArB,yQACA,cAAC,IAAD,CAAQd,UAAWC,IAAOc,OAAQC,QAAQ,UAAUJ,KAAK,SAAzD,oEACA,cAAC,IAAD","file":"static/js/7.0106956a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"RegistrationView_logo__3ef_S\",\"form\":\"RegistrationView_form__3Hd1d\",\"input\":\"RegistrationView_input__3IrCG\",\"button\":\"RegistrationView_button__2-zoN\",\"textPass\":\"RegistrationView_textPass__2Qx_f\"};","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\nimport styles from './css/RegistrationView.module.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst RegistrationView = ({onRegister}) => {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const onHandleChange = e => {\r\n        const { name, value } = e.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'email':\r\n                setEmail(value);\r\n                break;\r\n            case 'password':\r\n                setPassword(value);\r\n                break;\r\n            default:\r\n                console.warn(`Тип поля name - ${name} не обрабатывается`);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (name === '') {\r\n            toast.error('Поле \"Имя\" не заполнено');\r\n        } if (email === '') { \r\n            toast.error('Поле \"Адрес почты\" не заполнено'); \r\n        } if (password.length < 7) { \r\n            toast.error('Неправильный пароль'); \r\n        } else {\r\n            onRegister({ name, email, password });\r\n            setName('');\r\n            setEmail('');\r\n            setPassword('');\r\n        };\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form className={styles.form} onSubmit={handleSubmit} autoComplete='off'>\r\n                <h2>Регистрация нового пользователя</h2>\r\n                <label htmlFor='name'>Имя</label>\r\n                <input\r\n                    name='name'\r\n                    id='name'\r\n                    className={styles.input}\r\n                    type=\"text\"\r\n                    onChange={onHandleChange}\r\n                    value={name}\r\n                />\r\n                <label htmlFor='email'>Адрес почты</label>\r\n                <input\r\n                    name='email'\r\n                    id='email'\r\n                    className={styles.input}\r\n                    type=\"text\"\r\n                    onChange={onHandleChange}\r\n                    value={email}\r\n                />\r\n                <label htmlFor='password'>Пароль*</label>\r\n                <input\r\n                    name='password'\r\n                    id='password'\r\n                    className={styles.input}\r\n                    type=\"text\"\r\n                    onChange={onHandleChange}\r\n                    value={password}\r\n                />\r\n                <p className={styles.textPass}>*Пароль должен состоять не менее, чем из 8 символов</p>\r\n                <Button className={styles.button} variant=\"primary\" type=\"submit\">Отправить</Button>\r\n                <ToastContainer />\r\n            </form>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    // isLoadingAuth: authSelectors.getAuthLoading(state),\r\n    errorReg: authSelectors.getAuthError(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRegister: (data) => dispatch(authOperations.register(data))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RegistrationView);\r\n\r\n\r\n// Классы\r\n\r\n// class RegistrationView extends Component {\r\n//     state = {\r\n//         name: '',\r\n//         email: '',\r\n//         password: ''\r\n//     }\r\n\r\n//     onNameChange = e => {\r\n//         this.setState({ name: e.currentTarget.value})\r\n//     }\r\n\r\n//     onEmailChange = e => {\r\n//         this.setState({ email: e.currentTarget.value})\r\n//     }\r\n\r\n//     onPasswordChange = e => {\r\n//         this.setState({ password: e.currentTarget.value})\r\n//     }\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         if (this.state.name === '') {\r\n//             toast.error('Поле \"Имя\" не заполнено');\r\n//         } if (this.state.email === '') { \r\n//             toast.error('Поле \"Адрес почты\" не заполнено'); \r\n//         } if (this.state.password.length < 7) { \r\n//             toast.error('Неправильный пароль'); \r\n//         } else {\r\n//             this.props.onRegister(this.state);\r\n//             this.setState({ name: '', email: '', password: '' });\r\n//         };\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <>\r\n//                 <form className={styles.form} onSubmit={this.handleSubmit} autoComplete='off'>\r\n//                     <h2>Регистрация нового пользователя</h2>\r\n//                     <label htmlFor={this.nameInputId}>Имя</label>\r\n//                     <input\r\n//                         name='name'\r\n//                         id={this.nameInputId}\r\n//                         className={styles.input}\r\n//                         type=\"text\"\r\n//                         onChange={this.onNameChange}\r\n//                         value={this.state.name}\r\n//                     />\r\n//                     <label>Адрес почты</label>\r\n//                     <input\r\n//                         name='email'\r\n//                         className={styles.input}\r\n//                         type=\"text\"\r\n//                         onChange={this.onEmailChange}\r\n//                         value={this.state.email}\r\n//                     />\r\n//                     <label>Пароль*</label>\r\n//                     <input\r\n//                         name='password'\r\n//                         className={styles.input}\r\n//                         type=\"text\"\r\n//                         onChange={this.onPasswordChange}\r\n//                         value={this.state.password}\r\n//                     />\r\n//                     <p className={styles.textPass}>*Пароль должен состоять не менее, чем из 8 символов</p>\r\n//                     <Button className={styles.button} variant=\"primary\" type=\"submit\">Отправить</Button>\r\n//                     <ToastContainer />\r\n//                 </form>\r\n//             </>\r\n//         )\r\n//     }\r\n// };\r\n"],"sourceRoot":""}