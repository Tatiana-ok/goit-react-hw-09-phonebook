{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/phonebook/phonebook-operations.js","components/ContactForm/ContactForm.js","redux/phonebook/phonebook-selectors.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/PhonebookView.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Axios","defaults","baseURL","operations","fetchContacts","dispatch","a","actions","fetchContactsRequest","get","data","fetchContactsSuccess","fetchContactsError","message","addContact","text","addContactRequest","contact","name","number","post","then","addContactSuccess","catch","error","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","connect","onSubmit","id","phonebookOperations","useState","setNameContact","setNumberContact","className","s","containerForm","e","preventDefault","toast","formInput","type","onChange","currentTarget","value","btnForm","getAllContacts","state","contacts","items","getFilter","filter","selectors","getVisibleContacts","createSelector","normolizedFilter","toLowerCase","includes","contactsSelectors","onChangeFilter","changeFilter","filterLabel","filterInput","onDeleteContact","onUpdateContact","listOfContact","map","itemOfListContact","itemNameContact","itemNumberContact","btnOfListContact","onClick","containerPhonebook","marginLeft","useEffect","style"],"mappings":"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","file":"static/js/4.48dab21e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__2k-EF\",\"filterLabel\":\"Filter_filterLabel__Stgpf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listOfContact\":\"ContactList_listOfContact__2k4zN\",\"itemOfListContact\":\"ContactList_itemOfListContact__1tWPM\",\"itemNameContact\":\"ContactList_itemNameContact__EcLdt\",\"itemNumberContact\":\"ContactList_itemNumberContact__nBik9\",\"btnOfListContact\":\"ContactList_btnOfListContact__3ZmIt\"};","import Axios from 'axios';\r\nimport actions from './phonebook-actions';\r\n\r\nAxios.defaults.baseURL = 'https://connections-api.herokuapp.com/'; \r\n\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(actions.fetchContactsRequest());\r\n    try {\r\n        const { data } = await Axios.get('/contacts');\r\n        dispatch(actions.fetchContactsSuccess(data))\r\n    } catch (error) {\r\n        dispatch(actions.fetchContactsError(error.message))\r\n    }\r\n};\r\n\r\nconst addContact = text => dispatch => {\r\n    dispatch(actions.addContactRequest());\r\n    const contact = {\r\n        name: text.name,\r\n        number: text.number,\r\n    };\r\n    \r\n    Axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n        .catch(({ error }) => dispatch(actions.addContactError(error.message)));\r\n};\r\n\r\n// const updateContact = contact => dispatch => {\r\n//     dispatch(actions.updateContactRequest());\r\n    \r\n//     Axios\r\n//         .post(`/contacts/${contact.id}`, contact)\r\n//         .then(({ data }) => dispatch(actions.updateContactSuccess(data)))\r\n//         .catch(({ error }) => dispatch(actions.updateContactError(error.message)));\r\n// };\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(actions.deleteContactRequest());\r\n    \r\n    Axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n        .catch(({ error }) => dispatch(actions.deleteContactError(error.message)));\r\n};\r\n\r\nconst operations = { fetchContacts, addContact, deleteContact };\r\n\r\nexport default operations;","import { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport { connect } from 'react-redux';\nimport phonebookOperations from '../../redux/phonebook/phonebook-operations';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ContactForm({onSubmit}) {\n  const [id, setId] = useState('');\n  const [name, setNameContact] = useState('');\n  const [number, setNumberContact] = useState('');\n\n  const onNameChange = e => {\n    setNameContact(e.currentTarget.value);\n  };\n\n  const onNumberChange = e => {\n    setNumberContact(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name === '') {\n      toast.error('Поле \"Имя\" не заполнено');\n    } if (number === '') {\n      toast.error('Поле \"Номер\" не заполнено');\n    } else {\n      onSubmit({id, name, number});\n      setNameContact('');\n      setNumberContact('')\n    };\n  };\n\n  return (\n    <>\n      <form className={s.containerForm} onSubmit={handleSubmit}>\n        <label>\n          <p>Имя</p>\n          <input\n            className={s.formInput}\n            type=\"text\"\n            onChange={onNameChange}\n            value={name}\n          />\n        </label>\n        <label>\n          <p>Номер</p>\n          <input\n            className={s.formInput}\n            type=\"text\"\n            onChange={onNumberChange}\n            value={number}\n          />\n        </label>\n        <button className={s.btnForm} type=\"submit\">\n          Добавить контакт\n        </button>\n      </form>\n      <ToastContainer />\n    </>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ id, name, number }) =>\n    dispatch(phonebookOperations.addContact({ id, name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n\n\n// Классы\n\n// class ContactForm extends Component {\n//   state = {\n//     id: '',\n//     name: '',\n//     number: '',\n//   };\n\n//   onNameChange = e => {\n//     this.setState({ name: e.currentTarget.value });\n//   };\n\n//   onNumberChange = e => {\n//     this.setState({ number: e.currentTarget.value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     if (this.state.number !== '') {\n//       this.props.onSubmit(this.state);\n//       this.setState({ name: '', number: '' });\n//       return;\n//     }\n//     alert('Заполните данные контакта!');\n//   };\n\n//   render() {\n//     return (\n//       <form className={s.containerForm} onSubmit={this.handleSubmit}>\n//         <label>\n//           <p>Имя</p>\n//           <input\n//             className={s.formInput}\n//             type=\"text\"\n//             onChange={this.onNameChange}\n//             value={this.state.name}\n//           />\n//         </label>\n//         <label>\n//           <p>Номер</p>\n//           <input\n//             className={s.formInput}\n//             type=\"text\"\n//             onChange={this.onNumberChange}\n//             value={this.state.number}\n//           />\n//         </label>\n//         <button className={s.btnForm} type=\"submit\">\n//           Добавить контакт\n//         </button>\n//       </form>\n//     );\n//   }\n// }","import { createSelector } from '@reduxjs/toolkit';\r\n    \r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normolizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normolizedFilter),\r\n        );\r\n    }\r\n);\r\n\r\nconst selectors = {getAllContacts, getFilter, getVisibleContacts}\r\n\r\nexport default selectors;","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { connect } from 'react-redux';\nimport actions from '../../redux/phonebook/phonebook-actions';\nimport contactsSelectors from '../../redux/phonebook/phonebook-selectors';\n\n\nconst Filter = ({ value = '', onChangeFilter }) => {\n  return (\n    <>\n      <label className={s.filterLabel}>\n        Фильтр контактов по имени\n        <input\n          className={s.filterInput}\n          type=\"text\"\n          value={value}\n          onChange={onChangeFilter}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: e =>\n    dispatch(actions.changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\nimport { connect } from 'react-redux';\nimport phonebookOperations from '../../redux/phonebook/phonebook-operations';\nimport contactsSelectors from '../../redux/phonebook/phonebook-selectors';\n\nfunction ContactList({ contacts = [], onUpdateContact, onDeleteContact }) {\n  return (\n    <>\n      <ul className={s.listOfContact}>\n        {contacts.map(contact => (\n          <li key={contact.id} className={s.itemOfListContact}>\n            <p className={s.itemNameContact}>{contact.name} </p>\n            <p className={s.itemNumberContact}>{contact.number}</p>\n            <button\n              className={s.btnOfListContact}\n              type=\"button\"\n              onClick={() => onUpdateContact(contact.id)}\n            >\n              Изменить\n            </button>\n            <button\n              className={s.btnOfListContact}\n              type=\"button\"\n              onClick={() => onDeleteContact(contact.id)}\n            >\n              Удалить\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: contactId =>\n    dispatch(phonebookOperations.deleteContact(contactId)),\n  onUpdateContact: contactId =>\n    dispatch(phonebookOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport phonebookOperations from '../redux/phonebook/phonebook-operations';\r\n// import phonebookSelectors from '../redux/phonebook/phonebook-selectors';\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport Filter from '../components/Filter/Filter';\r\nimport ContactList from '../components/ContactList/ContactList';\r\n\r\nconst containerPhonebook = {\r\n  marginLeft: \"10px\"\r\n};\r\n\r\nconst PhonebookView = ({fetchContacts}) => {\r\n\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  });\r\n\r\n  return (\r\n    <div style={containerPhonebook}>\r\n      <h1>Телефонная книга</h1>\r\n      <ContactForm />\r\n      <h2>Контакты</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(phonebookOperations.fetchContacts())\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(PhonebookView);\r\n\r\n\r\n// Классы\r\n\r\n// class PhonebookView extends Component {\r\n//   componentDidMount = () => {\r\n//     this.props.fetchContacts()\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div style={containerPhonebook}>\r\n//         <h1>Телефонная книга</h1>\r\n//         <ContactForm />\r\n//         <h2>Контакты</h2>\r\n//         <Filter />\r\n//         <ContactList />\r\n//       </div>\r\n//     )\r\n//   }\r\n// };","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerForm\":\"ContactForm_containerForm__2fdsw\",\"formInput\":\"ContactForm_formInput__13Nd7\",\"btnForm\":\"ContactForm_btnForm__evc-O\"};"],"sourceRoot":""}